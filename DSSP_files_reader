import os
from Bio.PDB import DSSP, PDBParser
import pandas as pd
from Bio.PDB.DSSP import make_dssp_dict
import numpy as np
#loading .DSSP files and converting into dataframe format, especially for SS3, SS8, and RSA features

def parse_dssp_from_dict(dssp_file):
    ## 1a2f.dssp
    d = make_dssp_dict(dssp_file)
    appender = []
    for k in d[1]:
        to_append = []
        y = d[0][k]
        chain = k[0]
        residue = k[1]
        het = residue[0]
        resnum = residue[1]
        icode = residue[2]
        to_append.extend([chain, resnum, icode])
        to_append.extend(y)
        appender.append(to_append)

    cols = ['chain','resnum', 'icode' ,'aa', 'ss', 'exposure_rsa', 'phi', 'psi','ggg',
            'NH_O_1_relidx', 'NH_O_1_energy', 'O_NH_1_relidx',
            'O_NH_1_energy', 'NH_O_2_relidx', 'NH_O_2_energy',
            'O_NH_2_relidx', 'O_NH_2_energy']

    df = pd.DataFrame.from_records(appender, columns=cols)

    return df

def extract_SS_ASA_fromDSSP(dssp_file):
    df = parse_dssp_from_dict(dssp_file)
    # if includeside == False:
    #     break_idx = list(map(lambda x: x[3:-3], breakchains))
    # else:
    #     break_idx = list(map(lambda x: x, breakchains))
    #
    # break_idx = np.concatenate(break_idx, 0).astype(np.int).tolist()

    #df = df[(df["chain"] == chain) & (df["resnum"].isin(break_idx)) & (df["icode"] == " ")]

    ss8_series = df['ss']
    ss3_series = ss8_series.copy()
    rsa_series = df['exposure_rsa']

    ss3_series.loc[(ss8_series == 'T')|(ss8_series == 'S')|(ss8_series == '-')] = "L"
    ss3_series.loc[(ss8_series == 'H') | (ss8_series == 'G') | (ss8_series == 'I')] = "H"
    ss3_series.loc[(ss8_series == 'B') | (ss8_series == 'E')] = "E"

    return ss8_series.tolist(), ss3_series.tolist(), rsa_series.tolist(), df["resnum"].tolist()

a = extract_SS_ASA_fromDSSP('/media/ST-18T/Ma/ProteinDesign/backup-data/dssp/3zeu.dssp')
